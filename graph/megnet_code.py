# -*- coding: utf-8 -*-
"""Megnet_code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kJDa5nVPZnctF4H3873GNhuYrGo3euk4
"""

!pip install megnet

!pip install -U jarvis-tools

!pip install matminer

from megnet.models import MEGNetModel
from megnet.data.crystal import CrystalGraph
import numpy as np
from pymatgen.core.structure import Structure
import csv
import os
import random
from sklearn.metrics import mean_absolute_error
import warnings
import numpy as np

import pandas as pd
results=pd.read_csv('/content/magnet_train_id.csv')

import os
from pymatgen.ext.matproj import MPRester

# Create an instance of the MPRester class with your API key
api_key = 'mv0hJgupKqxOTd9c'
mpr = MPRester(api_key)

# Get the list of material IDs from your DataFrame
material_ids = results['material_id'].tolist()

cif_files_train = []
for material_id in material_ids:
    structure = mpr.get_structure_by_material_id(material_id)
    cif_file = os.path.join("/content/sample_data", f"{material_id}.cif")
    structure.to(fmt="cif", filename=cif_file)
    cif_files_train.append(cif_file)

formation_energies_train = results['formation_energy_per_atom'].tolist()

nfeat_bond = 100
r_cutoff = 5
gaussian_centers = np.linspace(0, r_cutoff + 1, nfeat_bond)
gaussian_width = 0.5

graph_converter = CrystalGraph(cutoff=r_cutoff)
# Set up the MEGNet model
model = MEGNetModel( nblocks=3,
    graph_converter=graph_converter,
    centers=gaussian_centers,
    width=gaussian_width,
)

# Convert the CIF files to graph representations
graphs = []

for cif_file in cif_files_train:
    structure = Structure.from_file(cif_file)
    graph = model.graph_converter.convert(structure)
    graphs.append(graph)
model.train_from_graphs(graphs, formation_energies_train, epochs=300)
# Convert the graph representations and targets to arrays

model.save_model('test.hdf5')

model= MEGNetModel.from_file('test.hdf5')

model.summary()

import os
import pandas as pd

# Load the test data from the CSV file
test_data = pd.read_csv('/content/megnet_test.csv')

cif_dir = '/content/sample_data'  # Specify the directory path where the CIF files are saved

new_structures = []
new_targets = []
preds = []

for i, row in test_data.iterrows():
    material_id = row['material_id']
    formation_energy = row['formation_energy_per_atom']

    # Retrieve the CIF file for the material ID
    cif_file = os.path.join(cif_dir, f"{material_id}.cif")

    # Load the structure from the CIF file
    s = Structure.from_file(cif_file)

    # Store the structure and target value
    new_structures.append(s)
    new_targets.append(formation_energy)

    # Predict the property of the new structure
    pred_target = model.predict_structure(s)
    preds.append(pred_target)

# Convert the predicted energies and actual energies to arrays
preds = np.array(preds)
new_targets = np.array(new_targets)

# Calculate the RMSE between the predicted energies and the actual energies
rmse = np.sqrt(mean_squared_error(new_targets, preds))
print("Test RMSE:", rmse)