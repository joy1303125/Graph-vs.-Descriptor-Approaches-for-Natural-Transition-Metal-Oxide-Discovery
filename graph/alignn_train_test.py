# -*- coding: utf-8 -*-
"""ALIGNN_train_test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eZxgeTv4lkOEo97S3bLGA2WLz0ImYzjd
"""

!pip install --pre dgl -f https://data.dgl.ai/wheels/cu117/repo.html
!pip install --pre dglgo -f https://data.dgl.ai/wheels-test/repo.html
!pip install alignn

import os
!pwd
os.chdir('/content')
# Clone ALIGNN repo to get example folder
if not os.path.exists('alignn'):
  !git clone https://github.com/usnistgov/alignn.git

os.chdir('alignn')

import shutil

zip_path = '/content/sample_data.zip'  # Path to your folder file
new_directory = '/content/train_n'  # Name of the new directory

# Unzip the folder file
shutil.unpack_archive(zip_path, new_directory, 'zip')

import time
t1=time.time()
!train_folder.py --root_dir "/content/train_n/sample_data" --epochs 3 --batch_size 32 --config "alignn/examples/sample_data/config_example.json" --output_dir=temp
t2=time.time()
print ('Time in s',t2-t1)

from alignn.models.alignn import ALIGNN, ALIGNNConfig
import torch
output_features =  1

filename = '/content/alignn/temp/checkpoint_3.pt'

device = "cpu"
if torch.cuda.is_available():
    device = torch.device("cuda")
model = ALIGNN(ALIGNNConfig(name="alignn", output_features=output_features))
model.load_state_dict(torch.load(filename, map_location=device)["model"])
model.eval()

!pip install pymatgen

import pandas as pd
results=pd.read_csv('/content/megnet_test.csv')

import os
from pymatgen.ext.matproj import MPRester

# Create an instance of the MPRester class with your API key
api_key = 'mv0hJgupKqxOTd9c'
mpr = MPRester(api_key)

# Get the list of material IDs from your DataFrame
material_ids = results['material_id'].tolist()

import os
from pymatgen.ext.matproj import MPRester

# Create an instance of the MPRester class with your API key
api_key = 'mv0hJgupKqxOTd9c'
mpr = MPRester(api_key)

# Get the list of material IDs from your DataFrame
material_ids = results['material_id'].tolist()
cif_files_test = []
for material_id in material_ids:
    structure = mpr.get_structure_by_material_id(material_id)
    cif_file = os.path.join("/content/test", f"{material_id}.cif")
    structure.to(fmt="cif", filename=cif_file)
    cif_files_test.append(cif_file)

import os
from pymatgen.io.cif import CifParser
from pymatgen.io.vasp.inputs import Poscar

# Specify the folder path containing the CIF files
folder_path = "/content/test"

# Create the target folder to store the VASP files
target_folder = "mm"
os.makedirs(target_folder, exist_ok=True)

# Convert CIF files to VASP files
for filename in os.listdir(folder_path):
    if filename.endswith(".cif"):
        # Read the CIF file
        cif_filepath = os.path.join(folder_path, filename)
        cif_parser = CifParser(cif_filepath)
        structure = cif_parser.get_structures(primitive=False)[0]

        # Write the structure to a VASP (POSCAR) file
        vasp_filename = os.path.splitext(filename)[0] + ".vasp"
        vasp_filepath = os.path.join(target_folder, vasp_filename)
        poscar = Poscar(structure)
        poscar.write_file(vasp_filepath)

import os
import csv

# Set the directory containing the VASP files
directory = '/content/mm'

# Set the output CSV file path
output_csv = 'output.csv'

# Get a list of all VASP files in the directory
vasp_files = [file for file in os.listdir(directory) if file.endswith('.vasp')]

# Open the output CSV file in write mode
with open(output_csv, 'w', newline='') as csvfile:
    writer = csv.writer(csvfile)
    writer.writerow(['VASP file', 'Output'])  # Write the header row

    # Iterate over the VASP files and perform prediction for each file
    for vasp_file in vasp_files:
        # Construct the full path to the VASP file
        vasp_path = os.path.join(directory, vasp_file)

        # Load the structure from the VASP file
        atoms = Atoms.from_poscar(vasp_path)

        # Create the DGL graph and labeled graph
        g, lg = Graph.atom_dgl_multigraph(
            atoms, cutoff=float(cutoff), max_neighbors=max_neighbors
        )

        out_data = (model([g, lg]).detach().cpu().numpy() .flatten().tolist())

        # Write the VASP file name and output to the CSV file
        writer.writerow([vasp_file, out_data[0]])

# Print a message indicating the completion of writing to the CSV file
print('Output saved to', output_csv)
